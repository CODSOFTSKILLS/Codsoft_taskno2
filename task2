import random

class TicTacToe:
    def __init__(self):
        self.board = [' ' for _ in range(9)]  # Initialize empty board

    def print_board(self):
        for row in [self.board[i*3:(i+1)*3] for i in range(3)]:
            print('| ' + ' | '.join(row) + ' |')

    def available_moves(self):
        return [i for i, spot in enumerate(self.board) if spot == ' ']

    def winner(self, board, player):
        # Check rows, columns, and diagonals for a win
        wins = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]
        for w in wins:
            if all(board[i] == player for i in w):
                return True
        return False

    def game_over(self):
        return self.winner(self.board, 'X') or self.winner(self.board, 'O') or len(self.available_moves()) == 0

    def make_move(self, position, player):
        self.board[position] = player

    def minimax(self, board, player):
        if self.winner(board, 'X'):
            return {'score': -10}
        elif self.winner(board, 'O'):
            return {'score': 10}
        elif len(self.available_moves()) == 0:
            return {'score': 0}

        moves = []

        for move in self.available_moves():
            new_board = board[:]
            new_board[move] = player

            if player == 'O':
                result = self.minimax(new_board, 'X')
                result['index'] = move
                moves.append(result)
            else:
                result = self.minimax(new_board, 'O')
                result['index'] = move
                moves.append(result)

        if player == 'O':
            best_move = max(moves, key=lambda x: x['score'])
        else:
            best_move = min(moves, key=lambda x: x['score'])

        return best_move

    def ai_move(self):
        if len(self.available_moves()) == 9:
            return random.choice(self.available_moves())  # Random move for the first turn
        else:
            return self.minimax(self.board, 'O')['index']


def play():
    game = TicTacToe()
    human_player = 'X'
    ai_player = 'O'

    while not game.game_over():
        if human_player in game.available_moves():
            print("Human's Turn")
            game.print_board()
            human_move = int(input("Enter your move (0-8): "))
            game.make_move(human_move, human_player)
            if game.winner(game.board, human_player):
                print("Human wins!")
                game.print_board()
                return
        else:
            print("No more available moves. It's a draw!")
            game.print_board()
            return

        if not game.game_over():
            ai_move = game.ai_move()
            print("AI's Turn")
            game.make_move(ai_move, ai_player)
            if game.winner(game.board, ai_player):
                print("AI wins!")
                game.print_board()
                return
    print("It's a draw!")
    game.print_board()


if __name__ == "__main__":
    play()
